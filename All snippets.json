[{"copy":0,"tags":["wx","js"],"key":"165e40d57cfcf546562c980bc45cafe83c16a023","createAt":1597287489932,"updateAt":1597287524126,"name":"eventChannel 页面间通信","description":"","files":[{"key":"be2dbbbe6215c49139823e4258447c289b0a2e13","name":"发送页","value":"wx.navigateTo({\n                url: '/pages/shopping/order/item/index',\n                events: {\n                    // 为指定事件添加一个监听器，获取被打开页面传送到当前页面的数据\n                    acceptDataFromOpenedPage: function (data) {\n                        console.log(data)\n                    },\n                    someEvent: function (data) {\n                        console.log(data)\n                    }\n                },\n                success: function (res) {\n                    // 通过eventChannel向被打开页面传送数据\n                    // 数组格式pro，统一格式\n                    // res.eventChannel.emit('orderItems', {data: 'test'})\n                    res.eventChannel.emit('acceptDataFromOpenerPage', {data: 'test'})\n                }\n            })"},{"key":"85aeeeb2807b5ca78c07e3ae1d0bb27f40e973f8","name":"接受页","value":"  onLoad: function (options) {\n            const eventChannel = this.getOpenerEventChannel()\n            // 监听acceptDataFromOpenerPage事件，获取上一页面通过eventChannel传送到当前页面的数据\n            eventChannel.on('orderItems', function (data) {\n                data.orderItems.forEach(item => {\n                    //todo get data from api\n                    console.log(item.productCode)\n                })\n            })\n        },"}]},{"copy":0,"tags":["wx","js"],"key":"25dbe98dc7fc7a67729415ae69446b53eb95a18a","createAt":1597300434284,"updateAt":1597300434284,"name":"page.filter代理page页面","lang":"JavaScript","value":"// utils/filter.js\nfunction loginCheck(pageObj) {\n    //for dev\n    // return pageObj;\n\n    if (pageObj.onLoad) {\n        let _onLoad = pageObj.onLoad;\n        // 使用onLoad的话需要传递options\n        pageObj.onLoad = function (options) {\n            if (wx.getStorageSync('token')) {\n                // 获取当前页面\n                let currentInstance = getPageInstance();\n                _onLoad.call(currentInstance, options);\n\n            } else {\n                //跳转到登录页\n               // getApp().$router.push('user/login/index')\n            }\n        }\n    }\n    return pageObj;\n}\n\n// 获取当前页面\nfunction getPageInstance() {\n    var pages = getCurrentPages();\n    return pages[pages.length - 1];\n}\n\nexports.loginCheck = loginCheck;\n","description":""},{"copy":0,"tags":["js"],"key":"99c9f7c923cf7f895ea44f97378b8129c6b0403c","createAt":1597300584255,"updateAt":1597300584255,"name":"防抖节流","lang":"JavaScript","value":"/*函数节流*/\nfunction throttle(fn, interval) {\n    var enterTime = 0;//触发的时间\n    var gapTime = interval || 300 ;//间隔时间，如果interval不传，则默认300ms\n    return function() {\n        var context = this;\n        var backTime = new Date();//第一次函数return即触发的时间\n        if (backTime - enterTime > gapTime) {\n            fn.call(context,arguments);\n            enterTime = backTime;//赋值给第一次触发的时间，这样就保存了第二次触发的时间\n        }\n    };\n}\n\n/*函数防抖*/\nfunction debounce(fn, interval) {\n    var timer;\n    var gapTime = interval || 1000;//间隔时间，如果interval不传，则默认1000ms\n    return function() {\n        clearTimeout(timer);\n        var context = this;\n        var args = arguments;//保存此处的arguments，因为setTimeout是全局的，arguments不是防抖函数需要的。\n        timer = setTimeout(function() {\n            fn.call(context,args);\n        }, gapTime);\n    };\n}\n\nexport default {\n    throttle,\n    debounce\n};\n","description":""},{"copy":0,"tags":["js"],"key":"303a2b473e4d16178daba13302d7e1474194b4e2","createAt":1597306238692,"updateAt":1597306259195,"name":"proxy代理拦截","description":"","files":[{"key":"1d11405255a62e9ae508b936460a0b6f61ddeb5b","name":"封装","value":"    proxy(fn) {\n        return new Proxy(fn, {\n            apply(target, ctx, args) {\n\n                console.log(`before:${target.name}`, args)\n                let result = Reflect.apply(...arguments);\n                console.log(`after:${target.name}`, result)\n\n                return result\n            }\n        })\n    },"},{"key":"27dcc053a463734fbc051271f1cc708ee86c4e89","name":"调用","value":" //局部拦截\n    test() {\n        proxy.login(this.sum)()\n    },\n    //整体拦截\n    test: proxy.login(function () {\n        this.add()\n    }),"}]},{"copy":0,"tags":[],"key":"34caa61f682bde4887940f5cd29b86be7d43e981","createAt":1597313447350,"updateAt":1597313447350,"name":"async 并发请求","lang":"JavaScript","value":" let articleList = await article.getList()\n let catalogList = await catalog.getList()\n\n await Promise.all([article.getList(), catalog.getList()])","description":"同步请求与并发请求"},{"copy":0,"tags":["lodash"],"key":"5f2ddedbe392a52f7dae290e8517cc34b06c44d1","createAt":1597321365662,"updateAt":1597321365662,"name":"lodash显式链式调用","lang":"JavaScript","value":"catalogList = _.chain(catalogList)\n            .forEach(o => {\n                o.list = _.filter(articleList, ['catalog_id', o.id])\n                o.head = _.filter(articleList, ['is_col_header', true])\n            })\n            .filter(o => {\n                return o.list.length > 0\n            })\n            .value();","description":""},{"copy":0,"tags":["js"],"key":"cf23b9a2fc24642bb205f1190e854cfb9ba67f6a","createAt":1597375827492,"updateAt":1597376715323,"name":"require/exports 和 import/export ","description":"","files":[{"key":"fd9915d79a73b824b969b18091662a4d4a0e3a11","name":"require/exports","value":"exports.fs = fs\nmodule.exports = fs\n\nconst fs = require('fs')\n"},{"key":"0de3fda70c76370b9dac66f059acbe6b3fea56e1","name":"import/export","value":"export default fs\nexport const fs\nexport function readFile\nexport {readFile, read}\nexport * from 'fs'\n\nimport fs from 'fs'\nimport {default as fs} from 'fs'\nimport * as fs from 'fs'\nimport {readFile} from 'fs'\nimport {readFile as read} from 'fs'\nimport fs, {readFile} from 'fs'\n\n\n//default 写法对比\n// 第一组\nexport default function crc32() {}\nimport crc32 from 'crc32'; \n\n// 第二组\nexport function crc32() {};\nimport {crc32} from 'crc32'; "}]},{"copy":0,"tags":["lodash","wx"],"key":"a1b9d22b0bee152180e2ab6a99798d634f1a801f","createAt":1597393694186,"updateAt":1597393694186,"name":"小程序lodash配置","lang":"JavaScript","value":"//lodash的特殊配置\nObject.assign(global, {\n    Array: Array,\n    Date: Date,\n    Error: Error,\n    Function: Function,\n    Math: Math,\n    Object: Object,\n    RegExp: RegExp,\n    String: String,\n    TypeError: TypeError,\n    setTimeout: setTimeout,\n    clearTimeout: clearTimeout,\n    setInterval: setInterval,\n    clearInterval: clearInterval\n});\n/** 另一种方式\n * 直接引入 lodash modularize 之后的包可以解决\n\n npm install lodash.get\n let get = require('./your_copy_path/lodash.get/index');\n // 直接使用 get(obj, path);\n */","description":"下载lodash.min.js后, 在app.js加上这段代码"},{"copy":0,"tags":["ele","vue"],"key":"3399cb13d65c5215fb3f74eae5696a3f4f1716c0","createAt":1597916405799,"updateAt":1597916405799,"name":"修改UI样式","lang":"SCSS","value":"1.去掉scoped+父类\n2.使用 /deep/\n  /*\n  修改样式\n  通过使用 box 的class类，找到下面组件内的class类，中间必须得使用 /deep/ 才能找到下面的class类。\n  */\n  .box  /deep/ .xxxxx组件样式类 {\n    color: red;\n  }\n3.使用>>>\n\n  /*\n  修改样式\n  通过使用 box的class类，找到下面组件内的class类，中间必须得使用 >>> 才能找到下面的class类。\n  */\n  .box >>> .xxxxx组件样式类 {\n    color: red;\n  }","description":"修改UI样式但不污染全局https://blog.csdn.net/hani_wen/article/details/81545106?utm_source=blogxgwz6"},{"copy":0,"tags":["tpl","ele"],"key":"2fce6a6fd60ed7875534ff8b88df489f2ad49d71","createAt":1598587096106,"updateAt":1598587117193,"name":"列表搜索条件","lang":"HTML","value":"<el-card>\n      <div slot=\"header\">\n        <span>搜索条件</span>\n      </div>\n      <div>\n        <y-form\n          ref=\"articleForm\"\n          :model=\"articleForm\"\n          label-width=\"80px\"\n        >\n          <el-row>\n\n\n          </el-row>\n          <el-row type=\"flex\" align=\"space-between\">\n            <el-col>\n\n              <el-button type=\"primary\" @click=\"onSearch\">查询</el-button>\n              <el-button @click=\"reset\">重置</el-button>\n            </el-col>\n\n            <el-button type=\"success\" @click=\"add\">编写推文</el-button>\n\n          </el-row>\n\n        </y-form>\n\n      </div>\n    </el-card>","description":""},{"copy":0,"tags":[],"key":"d5bf1687cc6912c881799535ce3aa5913d849463","createAt":1598863730602,"updateAt":1598863730602,"name":"yunxiang.json代码生成模板","lang":"JSON","value":",\n  {\n    \"ApiPath\": \"\",\n    \"Discription\": \"商品颜色表\",\n    \"HasCreate\": true,\n    \"HasDelete\": true,\n    \"HasDetail\": true,\n    \"HasEdit\": true,\n    \"HasList\": true,\n    \"ModelNameSingular\": \"color\",\n    \"ModelNamePlural\": \"colors\",\n    \"ModuleNameCn\": \"颜色表\",\n    \"TableName\": \"color\",\n    \"Fields\": [\n      {\n        \"FieldNameCn\": \"颜色选择\",\n        \"Description\": \"\",\n        \"Editable\": true,\n        \"FieldNameEn\": \"code\",\n        \"Searchable\": false,\n        \"SearchCondition\": \"like\",\n\n        \"VueShowinList\": true,\n        \"VueListWidth\": \"\",\n        \"VueListConfig\": \"\",\n        \"VueComponent\": \"y-input\",\n        \"VueComponentConfig\": \"\",\n        \"VueRegx\": \"\",\n        \"VueFormTips\": \"\",\n        \"VueEndMark\": \"标记以便于搜索替换\"\n      }\n    ]\n  }","description":""},{"copy":0,"tags":["js","reg"],"key":"73de062add42e728e7ac6b97329663defcd32110","createAt":1599014419720,"updateAt":1599014447833,"name":"JS正则表达式","lang":"JavaScript","value":"// 提取数字,返回数组\nlet numList = source.match(/[0-9][0-9]*/g)\n\n","description":""},{"copy":0,"tags":["css"],"key":"992f89c0722e39c08434f4d2158d6bd6372b49a2","createAt":1599021408542,"updateAt":1599021408542,"name":"scss循环","lang":"SCSS","value":" /**\n  * 增加商品详情轮播图的介绍\n  * 类选择器+深度选择器+子元素选择器+伪元素+scss数组循环(基1)\n   */\n  $contents: '正面图', '侧面图','背面图';\n  @each $c in $contents {\n    $i: index($contents, $c);\n    .upload-carousels /deep/ .el-upload-list--picture-card .el-upload-list__item:nth-child(#{$i}):before {\n      position: absolute;\n      content: $c;\n    }\n  }","description":"/**\n  * 增加商品详情轮播图的介绍\n  * 类选择器+深度选择器+子元素选择器+伪元素+scss数组循环(基1)\n   */"},{"copy":0,"tags":["vuex","websocket"],"key":"3c94dd11df9a32cb823cc742621e875cf7eb8750","createAt":1599297686856,"updateAt":1599297686856,"name":"vuex结合websocket","lang":"JavaScript","value":"const state = {\n  msg: {},\n  webSocket: {}\n}\n\nconst mutations = {\n  SET_SOCKET: (state, socket) => {\n    state.webSocket = socket\n  },\n  SET_MSG: (state, msg) => {\n    state.msg = msg\n  }\n}\n\nconst actions = {\n  // todo init socket by userinfo\n  init({ commit, state, dispatch }, user) {\n    return new Promise((resolve) => {\n      const ws = new WebSocket('ws://127.0.0.1:8887')\n      commit('SET_SOCKET', ws)\n      dispatch('receive')\n      resolve()\n    })\n  },\n  send({ commit, state }, msg) {\n    return new Promise((resolve) => {\n      const ws = state.webSocket\n      ws.onopen = () => {\n        ws.send(msg)\n        console.log('ws send : ', msg)\n      }\n      resolve()\n    })\n  },\n  receive({ commit, state }) {\n    return new Promise((resolve) => {\n      state.webSocket.onmessage = (evt) => {\n        const msg = evt.data\n        commit('SET_MSG', msg)\n        console.log('ws receive:', msg)\n      }\n      resolve()\n    })\n  }\n}\n\nexport default {\n  namespaced: true,\n  state,\n  mutations,\n  actions\n}\n\n","description":""},{"copy":0,"tags":["css"],"key":"c3eb673465654509537aa1e24a3210012f1da462","createAt":1599468955893,"updateAt":1599795256175,"name":"隐藏滚动条但是能滚动","lang":"CSS","value":"//多种实现方式\n// 1.  非标准属性, 只在webkit内核生效\n<div class=\"body\" style=\"height: 602px;overflow-x: hidden\"></div>\n\n.body::-webkit-scrollbar {\n  display: none;\n}\n\n//2. 变相隐藏侧边滚动条和底部滚动条, 父容器固定宽度溢出隐藏,子容器宽度为容器+滚动条(17px)并且x轴隐藏, y轴滚动\n// 需要设置子容器的height\n<div class=\"\" style=\"width:375px;overflow: hidden\">\n    <div class=\"body\" style=\"height: 100%; width:392px;overflow-x: hidden;overflow-y: scroll\">\n        content\n    </div>\n</div>\n","description":""},{"copy":0,"tags":["vuex"],"key":"bdda2eca48289a43ed6596b1bf5c1f0ae0efebef","createAt":1600156843976,"updateAt":1600156843976,"name":"解决vuex F5刷新消失的问题","lang":"JavaScript","value":"1.vuex-persistedstate\nhttps://www.cnblogs.com/lemoncool/p/9645587.html \n\n2. 刷新时手动存到strage\n created () {\n    //在页面加载时读取sessionStorage里的状态信息\n    if (sessionStorage.getItem(\"store\") ) {\n      this.$store.replaceState(Object.assign({}, this.$store.state,JSON.parse(sessionStorage.getItem(\"store\"))));\n      sessionStorage.removeItem('store');\n    }\n \n    //在页面刷新时将vuex里的信息保存到sessionStorage里\n    window.addEventListener(\"beforeunload\",()=>{\n      sessionStorage.setItem(\"store\",JSON.stringify(this.$store.state))\n    })\n  }\n\n3. 经过路由的导航守卫没有数据时重新请求(element admin 的方法)\n","description":""},{"copy":0,"tags":["架构"],"key":"e13555be12c6c86e2fbb9d9f4402222b93abee38","createAt":1600158639854,"updateAt":1600158639854,"name":"vue cli3配置","lang":"JavaScript","value":"1. https://juejin.im/post/6844903775950356488","description":"vue.config.js"},{"copy":0,"tags":["css"],"key":"a5f5699c17aaffd6fdb54fc0eedb56be5705062d","createAt":1600422364280,"updateAt":1600422402332,"name":"修改element样式的几种方式","lang":"CSS","value":"1. 简单粗暴: 删除scope , 缺点全局污染, 不推荐\n2. 找到element的类后, 增加深度选择器/deep/, (>>>也说可以, 但是我测试不生效)\n/deep/ .el-upload-dragger \n3. 修改子组件的element样式, 要先找到子组件中声明的类,再找到element的类\n.y-radio /deep/ .el-radio {  }\n\n","description":""},{"key":"67adf3a7e3b6b4d9db5791bbe4cd3c018afc0690","createAt":1600688126204,"updateAt":1600688126204,"copy":0,"tags":["js","reduce"],"name":"经纬度+reduce","lang":"JavaScript","value":"// 经纬度数据预处理，一维经纬度混合数组 转 经纬度对象数组\nconst arr = [112.91752281707764, 22.986407734375, 112.99305382293701, 22.9809145703125, 112.92026939910889, 22.961001850585937, 112.91752281707764, 22.986407734375]\n// reducer 函数接收4个参数:累计器,当前值,当前索引,源数组\narr.reduce((a, b, idx) => {\n  if (idx % 2) { // 如果是奇数项\n    const number = Math.ceil(idx / 2) - 1\n    // const number = a.length - 1\n    a[number].lat = b // 设置纬度\n    return a // 返回下一次迭代的累加器\n  } else { // 如果是偶数项\n    // 添加经度，返回合并后的数组  作为下一次迭代的累加器\n    return [...a, { lng: b }]\n  }\n}, []// 累加器初始化\n)","description":""},{"key":"bc2a8e21143f674e5740048287602b9b1906dcb8","createAt":1600688544243,"updateAt":1600688544243,"copy":0,"tags":["js"],"name":"遍历对象的方法","lang":"JavaScript","value":"1. for in  循环遍历对象自身的和继承的可枚举属性\n2. Object.keys 返回对象自身可枚举属性组成的数组\n3. Object.values 返回一个给定对象自身的所有可枚举属性[值]的数组\n\nps:Object.getOwnPropertyNames获取不可枚举属性\n","description":""}]